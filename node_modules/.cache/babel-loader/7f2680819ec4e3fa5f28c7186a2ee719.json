{"ast":null,"code":"var _jsxFileName = \"/home/mhucanada/Projects/Swerv/src/components/Result.js\";\nimport React from \"react\";\nimport cold from \"./cold.png\";\nimport hot from \"./hot.png\";\n\nvar mqtt = require('mqtt');\n\nvar client = mqtt.connect('wss://test.mosquitto.org:8081'); // Checks if RPi is connected, console logs message\n\nclient.on(\"connect\", () => {\n  client.subscribe(\"test/temp\");\n  console.log(\"Connected\");\n}); // Checks temperature input from RPi, changes image and records water saved based on flow rate if temp greater than 28 degrees \n\nclient.on(\"message\", (topic, payload) => {\n  console.log(parseFloat(payload.toString()));\n\n  function whichImage() {\n    if (parseFloat(payload) > 28) {\n      waterSaved += flowRate;\n      document.getElementById(\"demo\").innerHTML = waterSaved;\n      document.getElementById(\"image\").src = hot;\n    } else {\n      document.getElementById(\"image\").src = cold;\n    }\n\n    window.onload = function savedWater() {\n      document.getElementById(\"demo\").innerHTML = waterSaved;\n    };\n\n    return imageSource;\n  }\n\n  ;\n  whichImage();\n});\nvar imageSource = \"\";\nvar waterSaved = 0;\nvar flowRate = 30; // Prints current water flow rate or issues a warning if input is invalid.\n// Displays litres of water saved if given valid input and temperature is beyond threshold\n\nconst Result = props => React.createElement(\"div\", {\n  className: \"result\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}), React.createElement(\"p\", {\n  className: \"pad\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}, \"Current state:\"), React.createElement(\"img\", {\n  id: \"image\",\n  height: \"480\",\n  width: \"630\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}), React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), props.saved && React.createElement(\"p\", {\n  className: \"result__key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}, \"The flow rate is currently at:\", React.createElement(\"span\", {\n  className: \"result__value\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, \" \", flowRate = parseFloat(props.saved)), \" L/s\", console.log(flowRate)), props.error && React.createElement(\"p\", {\n  className: \"result__key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}, \"Warning:\", React.createElement(\"span\", {\n  className: \"result__value\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}, \" \", props.error)), React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78\n  },\n  __self: this\n}, \"Litres of Water Saved:\"), React.createElement(\"p\", {\n  id: \"demo\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n}));\n\nexport default Result;","map":{"version":3,"sources":["/home/mhucanada/Projects/Swerv/src/components/Result.js"],"names":["React","cold","hot","mqtt","require","client","connect","on","subscribe","console","log","topic","payload","parseFloat","toString","whichImage","waterSaved","flowRate","document","getElementById","innerHTML","src","window","onload","savedWater","imageSource","Result","props","saved","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,GAAP,MAAgB,WAAhB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,MAAM,GAAGF,IAAI,CAACG,OAAL,CAAa,+BAAb,CAAb,C,CAGA;;AACAD,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,MAAM;AACvBF,EAAAA,MAAM,CAACG,SAAP,CAAiB,WAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,CAHD,E,CAMA;;AAEAL,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,CAACI,KAAD,EAAQC,OAAR,KAAoB;AACrCH,EAAAA,OAAO,CAACC,GAAR,CAAYG,UAAU,CAACD,OAAO,CAACE,QAAR,EAAD,CAAtB;;AAEA,WAASC,UAAT,GAAsB;AAClB,QAAIF,UAAU,CAACD,OAAD,CAAV,GAAsB,EAA1B,EAA8B;AAE1BI,MAAAA,UAAU,IAAIC,QAAd;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4CJ,UAA5C;AACAE,MAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCE,GAAjC,GAAuCnB,GAAvC;AAEH,KAND,MAMO;AACHgB,MAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCE,GAAjC,GAAuCpB,IAAvC;AACH;;AACDqB,IAAAA,MAAM,CAACC,MAAP,GAAgB,SAASC,UAAT,GAAsB;AAClCN,MAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4CJ,UAA5C;AACH,KAFD;;AAGA,WAAOS,WAAP;AACH;;AAAA;AACDV,EAAAA,UAAU;AAEb,CApBD;AAyBA,IAAIU,WAAW,GAAG,EAAlB;AAQA,IAAIT,UAAU,GAAG,CAAjB;AACA,IAAIC,QAAQ,GAAG,EAAf,C,CAIA;AACA;;AACA,MAAMS,MAAM,GAAGC,KAAK,IAChB;AAAK,EAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI;AAAG,EAAA,SAAS,EAAC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAK,EAAA,EAAE,EAAC,OAAR;AAAgB,EAAA,MAAM,EAAC,KAAvB;AAA6B,EAAA,KAAK,EAAC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJJ,EAOKA,KAAK,CAACC,KAAN,IACG;AAAG,EAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACA;AAAM,EAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmCX,QAAQ,GAAGJ,UAAU,CAACc,KAAK,CAACC,KAAP,CAAxD,CADA,UAGEnB,OAAO,CAACC,GAAR,CAAYO,QAAZ,CAHF,CARR,EAeKU,KAAK,CAACE,KAAN,IACG;AAAG,EAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA;AAAM,EAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAkCF,KAAK,CAACE,KAAxC,CADA,CAhBR,EAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAnBJ,EAoBI;AAAG,EAAA,EAAE,EAAC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EApBJ,CADJ;;AA0BA,eAAeH,MAAf","sourcesContent":["import React from \"react\";\nimport cold from \"./cold.png\";\nimport hot from \"./hot.png\";\n\nvar mqtt = require('mqtt');\nvar client = mqtt.connect('wss://test.mosquitto.org:8081');\n\n\n// Checks if RPi is connected, console logs message\nclient.on(\"connect\", () => {\n    client.subscribe(\"test/temp\");\n    console.log(\"Connected\");\n})\n\n\n// Checks temperature input from RPi, changes image and records water saved based on flow rate if temp greater than 28 degrees \n\nclient.on(\"message\", (topic, payload) => {\n    console.log(parseFloat(payload.toString()));\n\n    function whichImage() {\n        if (parseFloat(payload) > 28) {\n\n            waterSaved += flowRate;\n            document.getElementById(\"demo\").innerHTML = waterSaved;\n            document.getElementById(\"image\").src = hot;\n\n        } else {\n            document.getElementById(\"image\").src = cold;\n        }\n        window.onload = function savedWater() {\n            document.getElementById(\"demo\").innerHTML = waterSaved;\n        };\n        return imageSource;\n    };\n    whichImage();\n\n})\n\n\n\n\nvar imageSource = \"\";\n\n\n\n\n\n\n\nvar waterSaved = 0;\nvar flowRate = 30;\n\n\n\n// Prints current water flow rate or issues a warning if input is invalid.\n// Displays litres of water saved if given valid input and temperature is beyond threshold\nconst Result = props => (\n    <div className=\"result\">\n        <br></br>\n        <p className=\"pad\">Current state:</p>\n        <img id=\"image\" height=\"480\" width=\"630\"></img>\n        <br></br>\n\n\n        {props.saved &&\n            <p className=\"result__key\">The flow rate is currently at:\n            <span className=\"result__value\"> { flowRate = parseFloat(props.saved) }</span> L/s\n            \n            { console.log(flowRate) }\n            </p>\n        }\n\n        {props.error && \n            <p className=\"result__key\">Warning:\n            <span className=\"result__value\"> {props.error}</span>\n            </p>}\n        <p>Litres of Water Saved:</p>\n        <p id=\"demo\"></p>\n    </div>\n);\n\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}