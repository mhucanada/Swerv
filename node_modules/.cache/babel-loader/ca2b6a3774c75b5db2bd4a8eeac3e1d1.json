{"ast":null,"code":"var _jsxFileName = \"/home/mhucanada/Projects/deltahacks-master/src/components/Result.js\";\nimport React from \"react\";\nimport cold from \"./cold.png\";\nimport hot from \"./hot.png\";\n\nvar mqtt = require('mqtt');\n\nvar client = mqtt.connect('wss://test.mosquitto.org:8081');\nclient.on(\"connect\", () => {\n  client.subscribe(\"test/temp\");\n  console.log(\"nice\");\n});\nvar sensorTemp = \"\";\nclient.on(\"message\", (topic, payload) => {\n  sensorTemp = payload.toString();\n  console.log(sensorTemp);\n  const images = [cold, hot];\n\n  function whichImage() {\n    if (parseFloat(payload) > 28) {\n      function myFunction() {\n        setInterval(myTimer, 1000);\n      }\n\n      myFunction();\n\n      function myTimer() {\n        waterSaved += flowRate;\n        document.getElementById(\"demo\").innerHTML = waterSaved;\n      }\n\n      ;\n      imageSource = images[1];\n    } else {\n      imageSource = images[0];\n    }\n\n    window.onload = function savedWater() {\n      document.getElementById(\"demo\").innerHTML = waterSaved;\n    };\n\n    return imageSource;\n  }\n\n  ;\n  whichImage();\n});\nconsole.log(sensorTemp);\nconst temperatures = [29, 31];\nconst testTemp = 31;\nvar imageSource = \"\";\nvar power = true;\nvar waterSaved = 0;\nvar flowRate = 30; // function whichImage() {\n//     imageSource = images[0];\n//     while (testTemp > 30) {\n//         function myFunction() { \n//             setInterval(myTimer, 1000);\n//         }\n//         myFunction();\n//         function myTimer() {\n//             waterSaved += flowRate;\n//             document.getElementById(\"demo\").innerHTML = waterSaved\n//         };\n//         imageSource = images[1];\n//         return imageSource;\n//     };\n//     window.onload = function savedWater(){\n//     document.getElementById(\"demo\").innerHTML = waterSaved;\n//     };\n//     return imageSource;\n// };\n// const chooseImage = whichImage();\n\nconst Result = props => React.createElement(\"div\", {\n  className: \"result\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93\n  },\n  __self: this\n}, React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94\n  },\n  __self: this\n}), React.createElement(\"p\", {\n  className: \"pad\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n}, \"Current state:\"), React.createElement(\"img\", {\n  src: cold,\n  height: \"480\",\n  width: \"630\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96\n  },\n  __self: this\n}), React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97\n  },\n  __self: this\n}), props.saved && React.createElement(\"p\", {\n  className: \"result__key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99\n  },\n  __self: this\n}, \"The flow rate is currently at:\", React.createElement(\"span\", {\n  className: \"result__value\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100\n  },\n  __self: this\n}, \" \", props.saved), \" L/s\"), props.error && React.createElement(\"p\", {\n  className: \"result__key\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103\n  },\n  __self: this\n}, \"Error:\", React.createElement(\"span\", {\n  className: \"result__value\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104\n  },\n  __self: this\n}, \" \", props.error)), React.createElement(\"p\", {\n  id: \"demo\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}));\n\nexport default Result;","map":{"version":3,"sources":["/home/mhucanada/Projects/deltahacks-master/src/components/Result.js"],"names":["React","cold","hot","mqtt","require","client","connect","on","subscribe","console","log","sensorTemp","topic","payload","toString","images","whichImage","parseFloat","myFunction","setInterval","myTimer","waterSaved","flowRate","document","getElementById","innerHTML","imageSource","window","onload","savedWater","temperatures","testTemp","power","Result","props","saved","error"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport cold from \"./cold.png\";\nimport hot from \"./hot.png\";\n\nvar mqtt = require('mqtt');\nvar client = mqtt.connect('wss://test.mosquitto.org:8081');\n\n\n\nclient.on(\"connect\", () => {\n    client.subscribe(\"test/temp\");\n    console.log(\"nice\");\n})\n\nvar sensorTemp = \"\";\n\nclient.on(\"message\", (topic, payload) => {\n    sensorTemp = payload.toString();\n    console.log(sensorTemp)\n\n\n    const images = [\n        cold,\n        hot,\n    ]\n    \n    function whichImage() {\n\n        if (parseFloat(payload) > 28) {\n            function myFunction() {\n                setInterval(myTimer, 1000);\n            }\n            myFunction();\n            function myTimer() {\n                waterSaved += flowRate;\n                document.getElementById(\"demo\").innerHTML = waterSaved\n            };\n            imageSource = images[1];\n     \n        } else {\n            imageSource = images[0];\n        }\n        window.onload = function savedWater() {\n            document.getElementById(\"demo\").innerHTML = waterSaved;\n        };\n        return imageSource;\n    };\n    whichImage();\n})\n\nconsole.log(sensorTemp)\n\n\n\n\n\nconst temperatures = [\n    29,\n    31,\n]\n\nconst testTemp = 31;\nvar imageSource = \"\";\nvar power = true;\nvar waterSaved = 0;\nvar flowRate = 30;\n\n// function whichImage() {\n//     imageSource = images[0];\n//     while (testTemp > 30) {\n//         function myFunction() { \n//             setInterval(myTimer, 1000);\n//         }\n//         myFunction();\n//         function myTimer() {\n//             waterSaved += flowRate;\n//             document.getElementById(\"demo\").innerHTML = waterSaved\n//         };\n//         imageSource = images[1];\n//         return imageSource;\n//     };\n//     window.onload = function savedWater(){\n//     document.getElementById(\"demo\").innerHTML = waterSaved;\n//     };\n\n//     return imageSource;\n// };\n\n// const chooseImage = whichImage();\n\n\nconst Result = props => (\n    <div className=\"result\">\n        <br></br>\n        <p className=\"pad\">Current state:</p>\n        <img src={cold} height=\"480\" width=\"630\"></img>\n        <br></br>\n        {props.saved &&\n            <p className=\"result__key\">The flow rate is currently at:\n            <span className=\"result__value\"> {props.saved}</span> L/s\n        </p>}\n        {props.error &&\n            <p className=\"result__key\">Error:\n            <span className=\"result__value\"> {props.error}</span>\n            </p>}\n        <p id=\"demo\"></p>\n    </div>\n);\n\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}